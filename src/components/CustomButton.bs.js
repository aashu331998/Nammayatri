// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as TextWrapper from "./TextWrapper.bs.js";
import * as ReactNative from "react-native";
import * as ThemebasedStyle from "../Hooks/ThemebasedStyle.bs.js";
import * as Style$ReactNative from "rescript-react-native/src/apis/Style.bs.js";
import * as JsxRuntime from "react/jsx-runtime";
import * as Animated$ReactNative from "rescript-react-native/src/apis/Animated.bs.js";

var $$Window = {};

function CustomButton(props) {
  var __borderColor = props.borderColor;
  var __borderRadius = props.borderRadius;
  var __borderWidth = props.borderWidth;
  var __fullLength = props.fullLength;
  var onPress = props.onPress;
  var __rightIcon = props.rightIcon;
  var __leftIcon = props.leftIcon;
  var __buttonSize = props.buttonSize;
  var text = props.text;
  var __buttonState = props.buttonState;
  var __loadingText = props.loadingText;
  var loadingText = __loadingText !== undefined ? __loadingText : "Loading..";
  var buttonState = __buttonState !== undefined ? __buttonState : "Normal";
  var buttonSize = __buttonSize !== undefined ? __buttonSize : "Medium";
  var leftIcon = __leftIcon !== undefined ? __leftIcon : "NoIcon";
  var rightIcon = __rightIcon !== undefined ? __rightIcon : "NoIcon";
  var fullLength = __fullLength !== undefined ? __fullLength : true;
  var borderWidth = __borderWidth !== undefined ? __borderWidth : 0;
  var borderRadius = __borderRadius !== undefined ? __borderRadius : 0;
  var borderColor = __borderColor !== undefined ? __borderColor : "#ffffff";
  var fillAnimation = React.useRef(new (ReactNative.Animated.Value)(0)).current;
  var match = ThemebasedStyle.useThemeBasedStyle();
  var payNowButtonShadowIntensity = match.payNowButtonShadowIntensity;
  var payNowButtonTextColor = match.payNowButtonTextColor;
  var tmp;
  tmp = buttonSize === "Medium" ? ({
        height: 45
      }) : ({
        height: 40
      });
  var tmp$1;
  tmp$1 = buttonSize === "Medium" ? ({
        fontSize: 17,
        paddingHorizontal: 8
      }) : ({
        fontSize: 14,
        paddingHorizontal: 6
      });
  var styles = ReactNative.StyleSheet.create({
        lengthStyle: fullLength ? ({
              width: Style$ReactNative.pct(100)
            }) : ({
              width: 300
            }),
        buttonSizeClass: tmp,
        textColor: {
          color: payNowButtonTextColor
        },
        buttonTextClass: tmp$1
      });
  var disabled;
  disabled = buttonState === "Normal" ? false : true;
  var isdisabledColor;
  isdisabledColor = buttonState === "Disabled" ? true : false;
  var fillStyle = {
    backgroundColor: match.component.background,
    opacity: 0.4,
    bottom: 0,
    position: "absolute",
    right: 0,
    top: 0
  };
  var widthStyle = {
    width: fillAnimation.interpolate({
          inputRange: [
            0.0,
            1.0
          ],
          outputRange: [
            "95%",
            "0%"
          ]
        })
  };
  var fillButton = function () {
    Animated$ReactNative.start(Animated$ReactNative.timing(fillAnimation, {
              toValue: 1.0,
              useNativeDriver: false,
              duration: 1800.0
            }), undefined, undefined);
  };
  var tmp$2;
  tmp$2 = typeof leftIcon !== "object" ? null : leftIcon._0;
  var tmp$3;
  if (text !== undefined && text !== "") {
    var tmp$4;
    switch (buttonState) {
      case "LoadingButton" :
          tmp$4 = loadingText;
          break;
      case "Completed" :
          tmp$4 = "Complete";
          break;
      case "Normal" :
      case "Disabled" :
          tmp$4 = text;
          break;
      
    }
    tmp$3 = JsxRuntime.jsx(ReactNative.View, {
          style: {
            alignItems: "center",
            flex: 1,
            justifyContent: "center"
          },
          children: Caml_option.some(JsxRuntime.jsx(TextWrapper.make, {
                    text: tmp$4,
                    textType: {
                      TAG: "CustomCssText",
                      _0: [
                        {
                          color: payNowButtonTextColor,
                          fontWeight: 400
                        },
                        styles.buttonTextClass
                      ]
                    }
                  }))
        });
  } else {
    tmp$3 = null;
  }
  var tmp$5;
  tmp$5 = buttonState === "LoadingButton" || buttonState === "Completed" || typeof rightIcon !== "object" ? null : rightIcon._0;
  return JsxRuntime.jsx(ReactNative.View, {
              style: [
                {
                  backgroundColor: "#7435FC",
                  borderColor: borderColor,
                  borderRadius: borderRadius,
                  borderWidth: borderWidth,
                  elevation: payNowButtonShadowIntensity,
                  shadowColor: match.payNowButtonShadowColor,
                  shadowOffset: {
                    height: payNowButtonShadowIntensity / 2,
                    width: 0
                  },
                  shadowOpacity: 0.2,
                  shadowRadius: payNowButtonShadowIntensity,
                  alignItems: "center",
                  justifyContent: "center",
                  margin: 1
                },
                styles.lengthStyle,
                styles.buttonSizeClass
              ],
              children: Caml_option.some(JsxRuntime.jsxs(ReactNative.TouchableOpacity, {
                        style: [{
                            borderRadius: borderRadius,
                            opacity: isdisabledColor ? 0.6 : 1,
                            alignItems: "center",
                            flex: 1,
                            flexDirection: "row",
                            height: Style$ReactNative.pct(100),
                            justifyContent: "center",
                            overflow: "hidden",
                            width: Style$ReactNative.pct(100)
                          }],
                        disabled: disabled,
                        onPress: onPress !== undefined ? (function (x) {
                              fillButton();
                              onPress(x);
                            }) : (function (param) {
                              
                            }),
                        children: [
                          tmp$2,
                          buttonState === "LoadingButton" ? JsxRuntime.jsx(Animated$ReactNative.View.make, {
                                  style: [
                                    fillStyle,
                                    widthStyle
                                  ]
                                }) : null,
                          tmp$3,
                          tmp$5
                        ]
                      }))
            });
}

var make = CustomButton;

export {
  $$Window ,
  make ,
}
/* react Not a pure module */
